Name: spike_detector - Device for detecting single spikes.

Description:

The spike_detector device is a recording device. It is used to record 
spikes from a single neuron, or from multiple neurons at once. Data 
is recorded in memory or to file as for all RecordingDevices. 
By default, GID and time of each spike is recorded. 
The spike detector can also record spike times with full precision 
from neurons emitting precisely timed spikes. Set /precise_times to 
achieve this. If there are precise models and /precise_times is not 
set, it will be set to True at the start of the simulation and 
/precision will be increased to 15 from its default value of 3. 
Any node from which spikes are to be recorded, must be connected to 
the spike detector using a normal connect command. Any connection weight 
and delay will be ignored for that connection. 
Simulations progress in cycles defined by the minimum delay. During each 
cycle, the spike detector records (stores in memory or writes to screen/file) 
the spikes generated during the previous cycle. As a consequence, any 
spikes generated during the cycle immediately preceding the end of the 
simulation time will not be recorded. Setting the /stop parameter to at the 
latest one min_delay period before the end of the simulation time ensures that 
all spikes desired to be recorded, are recorded. 
Spike are not necessarily written to file in chronological order. 
Note: 
Spikes are buffered in a two-segment buffer. We need to distinguish between 
two types of spikes: those delivered from the global event queue (almost all 
spikes) and spikes delivered locally from devices that are replicated on VPs 
(has_proxies() == false). 
&bull; Spikes from the global queue are delivered by deliver_events() at the 
beginning of each update cycle and are stored only until update() is called 
during the same update cycle. Global queue spikes are thus written to the 
read_toggle() segment of the buffer, from which update() reads. 
&bull; Spikes delivered locally may be delivered before or after 
spike_detector::update() is executed. These spikes are therefore buffered 
in the write_toggle() segment of the buffer and output during the next 
cycle. 
&bull; After all spikes are recorded, update() clears the read_toggle() segment 
of the buffer.


Receives:

SpikeEvent


SeeAlso:

spike_detector
Device
RecordingDevice

Source:

/home/dansan/neuromorphic/source/snn/nest-simulator-2.20.0/models/spike_detector.h
