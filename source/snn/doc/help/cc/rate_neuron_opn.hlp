Name: rate_neuron_opn - Base class for rate model with output noise.

Description:

Base class for rate model with output noise of the form 
@f[ 
\tau dX_i(t) / dt = - X_i(t) + \mu + \phi( \sum w_{ij} \cdot 
\psi( X_j(t-d_{ij}) + \sqrt{\tau} \cdot 
\sigma \cdot \xi_j(t) ) ) 
@f] 
or 
@f[ 
\tau dX_i(t) / dt = - X_i(t) + \mu 
+ \text{mult_coupling_ex}( X_i(t) ) \cdot \\ 
\phi( \sum w^{ &gt; 0 }_{ij} \cdot \psi( X_j(t-d_{ij}) \\ 
+ \sqrt{\tau} \cdot \sigma \cdot \xi_j(t) ) ) \\ 
+ \text{mult_coupling_in}( X_i(t) ) \cdot \\ 
\phi( \sum w^{ &lt; 0 }_{ij} \cdot \psi( X_j(t-d_{ij}) \\ 
+ \sqrt{\tau} \cdot \sigma \cdot \xi_j(t) ) ) 
@f] 
Here \f$ xi_j(t) \f$ denotes a Gaussian white noise. 
This template class needs to be instantiated with a class 
containing the following functions: 
&bull; input (nonlinearity that is applied to the input, either psi or phi) 
&bull; mult_coupling_ex (factor of multiplicative coupling for excitatory input) 
&bull; mult_coupling_in (factor of multiplicative coupling for inhibitory input) 
The boolean parameter linear_summation determines whether the input function 
is applied to the summed up incoming connections (True, default value, input 
represents phi) or to each input individually (False, input represents psi). 
In case of multiplicative coupling the nonlinearity is applied separately 
to the summed excitatory and inhibitory inputs if linear_summation=True.


References:

\verbatim embed:rst 
.. [1] Hahne J, Dahmen D, Schuecker J, Frommer A, Bolten M, Helias M, 
Diesmann M (2017). Integration of continuous-time dynamics in a 
spiking neural network simulator. Frontiers in Neuroinformatics, 11:34. 
DOI:  https://doi.org./10.3389/fninf.2017.00034 
\endverbatim


Author:

David Dahmen, Jan Hahne, Jannis Schuecker


SeeAlso:

lin_rate
tanh_rate
threshold_lin_rate

Source:

/home/dansan/neuromorphic/source/snn/nest-simulator-2.20.0/models/rate_neuron_opn.h
